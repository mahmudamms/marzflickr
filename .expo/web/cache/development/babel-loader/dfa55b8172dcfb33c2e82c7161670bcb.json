{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\iym_mobile\\\\SC\\\\iym_mobile\\\\node_modules\\\\react-native-select-two\\\\index.js\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Icon from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport Modal from 'react-native-modal';\nimport Button from \"./lib/Button\";\nimport TagItem from \"./lib/TagItem\";\nimport utilities from \"./lib/utilities\";\nimport PropTypes from 'prop-types';\n\nvar _Dimensions$get = Dimensions.get('window'),\n    height = _Dimensions$get.height;\n\nvar INIT_HEIGHT = height * 0.6;\n\nvar Select2 = function (_Component) {\n  _inherits(Select2, _Component);\n\n  var _super = _createSuper(Select2);\n\n  function Select2() {\n    var _this;\n\n    _classCallCheck(this, Select2);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      show: false,\n      preSelectedItem: [],\n      selectedItem: [],\n      data: [],\n      keyword: ''\n    };\n    _this.animatedHeight = new Animated.Value(INIT_HEIGHT);\n\n    _this.onItemSelected = function (item, isSelectSingle) {\n      var selectedItem = [];\n      var data = _this.state.data;\n      item.checked = !item.checked;\n\n      for (var index in data) {\n        if (data[index].id === item.id) {\n          data[index] = item;\n        } else if (isSelectSingle) {\n          data[index].checked = false;\n        }\n      }\n\n      data.map(function (item) {\n        if (item.checked) selectedItem.push(item);\n      });\n\n      _this.setState({\n        data: data,\n        selectedItem: selectedItem\n      });\n    };\n\n    _this.keyExtractor = function (item, idx) {\n      return idx.toString();\n    };\n\n    _this.renderItem = function (_ref) {\n      var item = _ref.item,\n          idx = _ref.idx;\n      var _this$props = _this.props,\n          colorTheme = _this$props.colorTheme,\n          isSelectSingle = _this$props.isSelectSingle;\n      return React.createElement(TouchableOpacity, {\n        key: idx,\n        onPress: function onPress() {\n          return _this.onItemSelected(item, isSelectSingle);\n        },\n        activeOpacity: 0.7,\n        style: styles.itemWrapper,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: [styles.itemText, _this.defaultFont],\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }\n      }, item.name), React.createElement(Icon, {\n        style: styles.itemIcon,\n        name: item.checked ? 'check-circle-outline' : 'radiobox-blank',\n        color: item.checked ? colorTheme : '#777777',\n        size: 20,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }\n      }));\n    };\n\n    _this.renderEmpty = function () {\n      var listEmptyTitle = _this.props.listEmptyTitle;\n      return React.createElement(Text, {\n        style: [styles.empty, _this.defaultFont],\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }\n      }, listEmptyTitle);\n    };\n\n    _this.closeModal = function () {\n      return _this.setState({\n        show: false\n      });\n    };\n\n    _this.showModal = function () {\n      return _this.setState({\n        show: true\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Select2, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.init();\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(newProps) {\n      this.init(newProps);\n    }\n  }, {\n    key: \"init\",\n    value: function init(newProps) {\n      var preSelectedItem = [];\n\n      var _ref2 = newProps || this.props,\n          data = _ref2.data;\n\n      data.map(function (item) {\n        if (item.checked) {\n          preSelectedItem.push(item);\n        }\n      });\n      this.setState({\n        data: data,\n        preSelectedItem: preSelectedItem\n      });\n    }\n  }, {\n    key: \"dataRender\",\n    get: function get() {\n      var _this$state = this.state,\n          data = _this$state.data,\n          keyword = _this$state.keyword;\n      var listMappingKeyword = [];\n      data.map(function (item) {\n        if (utilities.changeAlias(item.name).includes(utilities.changeAlias(keyword))) {\n          listMappingKeyword.push(item);\n        }\n      });\n      return listMappingKeyword;\n    }\n  }, {\n    key: \"defaultFont\",\n    get: function get() {\n      var defaultFontName = this.props.defaultFontName;\n      return defaultFontName ? {\n        fontFamily: defaultFontName\n      } : {};\n    }\n  }, {\n    key: \"cancelSelection\",\n    value: function cancelSelection() {\n      var _this$state2 = this.state,\n          data = _this$state2.data,\n          preSelectedItem = _this$state2.preSelectedItem;\n      data.map(function (item) {\n        item.checked = false;\n\n        for (var _iterator = _createForOfIteratorHelperLoose(preSelectedItem), _step; !(_step = _iterator()).done;) {\n          var _selectedItem = _step.value;\n\n          if (item.id === _selectedItem.id) {\n            item.checked = true;\n            break;\n          }\n        }\n      });\n      this.setState({\n        data: data,\n        show: false,\n        keyword: '',\n        selectedItem: preSelectedItem\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          style = _this$props2.style,\n          modalStyle = _this$props2.modalStyle,\n          title = _this$props2.title,\n          onSelect = _this$props2.onSelect,\n          onRemoveItem = _this$props2.onRemoveItem,\n          popupTitle = _this$props2.popupTitle,\n          colorTheme = _this$props2.colorTheme,\n          isSelectSingle = _this$props2.isSelectSingle,\n          cancelButtonText = _this$props2.cancelButtonText,\n          selectButtonText = _this$props2.selectButtonText,\n          searchPlaceHolderText = _this$props2.searchPlaceHolderText,\n          selectedTitleStyle = _this$props2.selectedTitleStyle,\n          buttonTextStyle = _this$props2.buttonTextStyle,\n          buttonStyle = _this$props2.buttonStyle,\n          showSearchBox = _this$props2.showSearchBox;\n      var _this$state3 = this.state,\n          show = _this$state3.show,\n          selectedItem = _this$state3.selectedItem,\n          preSelectedItem = _this$state3.preSelectedItem;\n      return React.createElement(TouchableOpacity, {\n        onPress: this.showModal,\n        activeOpacity: 0.7,\n        style: [styles.container, style],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }\n      }, React.createElement(Modal, {\n        onBackdropPress: this.closeModal,\n        style: {\n          justifyContent: 'flex-end',\n          margin: 0\n        },\n        useNativeDriver: true,\n        animationInTiming: 300,\n        animationOutTiming: 300,\n        hideModalContentWhileAnimating: true,\n        isVisible: show,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 17\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.modalContainer, modalStyle, {\n          height: this.animatedHeight\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }\n      }, React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }\n      }, React.createElement(Text, {\n        style: [styles.title, this.defaultFont, {\n          color: colorTheme\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 29\n        }\n      }, popupTitle || title)), React.createElement(View, {\n        style: styles.line,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 25\n        }\n      }), showSearchBox ? React.createElement(TextInput, {\n        underlineColorAndroid: \"transparent\",\n        returnKeyType: \"done\",\n        style: [styles.inputKeyword, this.defaultFont],\n        placeholder: searchPlaceHolderText,\n        selectionColor: colorTheme,\n        onChangeText: function onChangeText(keyword) {\n          return _this2.setState({\n            keyword: keyword\n          });\n        },\n        onFocus: function onFocus() {\n          Animated.spring(_this2.animatedHeight, {\n            toValue: INIT_HEIGHT + (Platform.OS === 'ios' ? height * 0.2 : 0),\n            friction: 7\n          }).start();\n        },\n        onBlur: function onBlur() {\n          Animated.spring(_this2.animatedHeight, {\n            toValue: INIT_HEIGHT,\n            friction: 7\n          }).start();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 35\n        }\n      }) : null, React.createElement(FlatList, {\n        style: styles.listOption,\n        data: this.dataRender || [],\n        keyExtractor: this.keyExtractor,\n        renderItem: this.renderItem,\n        ListEmptyComponent: this.renderEmpty,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }\n      }), React.createElement(View, {\n        style: styles.buttonWrapper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 25\n        }\n      }, React.createElement(Button, {\n        defaultFont: this.defaultFont,\n        onPress: function onPress() {\n          _this2.cancelSelection();\n        },\n        title: cancelButtonText,\n        textColor: colorTheme,\n        backgroundColor: \"#fff\",\n        textStyle: buttonTextStyle,\n        style: [styles.button, buttonStyle, {\n          marginRight: 5,\n          marginLeft: 10,\n          borderWidth: 1,\n          borderColor: colorTheme\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 29\n        }\n      }), React.createElement(Button, {\n        defaultFont: this.defaultFont,\n        onPress: function onPress() {\n          var selectedIds = [],\n              selectedObjectItems = [];\n          selectedItem.map(function (item) {\n            selectedIds.push(item.id);\n            selectedObjectItems.push(item);\n          });\n          onSelect && onSelect(selectedIds, selectedObjectItems);\n\n          _this2.setState({\n            show: false,\n            keyword: '',\n            preSelectedItem: selectedItem\n          });\n        },\n        title: selectButtonText,\n        backgroundColor: colorTheme,\n        textStyle: buttonTextStyle,\n        style: [styles.button, buttonStyle, {\n          marginLeft: 5,\n          marginRight: 10\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 29\n        }\n      })))), preSelectedItem.length > 0 ? isSelectSingle ? React.createElement(Text, {\n        style: [styles.selectedTitlte, this.defaultFont, selectedTitleStyle, {\n          color: '#333'\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 35\n        }\n      }, preSelectedItem[0].name) : React.createElement(View, {\n        style: styles.tagWrapper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 35\n        }\n      }, preSelectedItem.map(function (tag, index) {\n        return React.createElement(TagItem, {\n          key: index,\n          onRemoveTag: function onRemoveTag() {\n            var preSelectedItem = [];\n            var selectedIds = [],\n                selectedObjectItems = [];\n            var data = _this2.state.data;\n            data.map(function (item) {\n              if (item.id === tag.id) {\n                item.checked = false;\n              }\n\n              if (item.checked) {\n                preSelectedItem.push(item);\n                selectedIds.push(item.id);\n                selectedObjectItems.push(item);\n              }\n\n              ;\n            });\n\n            _this2.setState({\n              data: data,\n              preSelectedItem: preSelectedItem\n            });\n\n            onRemoveItem && onRemoveItem(selectedIds, selectedObjectItems);\n          },\n          tagName: tag.name,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 49\n          }\n        });\n      })) : React.createElement(Text, {\n        style: [styles.selectedTitlte, this.defaultFont, selectedTitleStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 27\n        }\n      }, title));\n    }\n  }]);\n\n  return Select2;\n}(Component);\n\nSelect2.defaultProps = {\n  cancelButtonText: 'Hủy',\n  selectButtonText: 'Chọn',\n  searchPlaceHolderText: \"Nhập vào từ khóa\",\n  listEmptyTitle: 'Không tìm thấy lựa chọn phù hợp',\n  colorTheme: '#16a45f',\n  buttonTextStyle: {},\n  buttonStyle: {},\n  showSearchBox: true\n};\nvar styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    minHeight: 45,\n    borderRadius: 2,\n    paddingHorizontal: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: '#cacaca',\n    paddingVertical: 4\n  },\n  modalContainer: {\n    paddingTop: 16,\n    backgroundColor: '#fff',\n    borderTopLeftRadius: 8,\n    borderTopRightRadius: 8\n  },\n  title: {\n    fontSize: 16,\n    marginBottom: 16,\n    width: '100%',\n    textAlign: 'center'\n  },\n  line: {\n    height: 1,\n    width: '100%',\n    backgroundColor: '#cacaca'\n  },\n  inputKeyword: {\n    height: 40,\n    borderRadius: 5,\n    borderWidth: 1,\n    borderColor: '#cacaca',\n    paddingLeft: 8,\n    marginHorizontal: 24,\n    marginTop: 16\n  },\n  buttonWrapper: {\n    marginVertical: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  button: {\n    height: 36,\n    flex: 1\n  },\n  selectedTitlte: {\n    fontSize: 14,\n    color: 'gray',\n    flex: 1\n  },\n  tagWrapper: {\n    flexDirection: 'row',\n    flexWrap: 'wrap'\n  },\n  listOption: {\n    paddingHorizontal: 24,\n    paddingTop: 1,\n    marginTop: 16\n  },\n  itemWrapper: {\n    borderBottomWidth: 1,\n    borderBottomColor: '#eaeaea',\n    paddingVertical: 12,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  itemText: {\n    fontSize: 16,\n    color: '#333',\n    flex: 1\n  },\n  itemIcon: {\n    width: 30,\n    textAlign: 'right'\n  },\n  empty: {\n    fontSize: 16,\n    color: 'gray',\n    alignSelf: 'center',\n    textAlign: 'center',\n    paddingTop: 16\n  }\n});\nSelect2.propTypes = {\n  data: PropTypes.array.isRequired,\n  style: PropTypes.object,\n  defaultFontName: PropTypes.string,\n  selectedTitleStyle: PropTypes.object,\n  buttonTextStyle: PropTypes.object,\n  buttonStyle: PropTypes.object,\n  title: PropTypes.string,\n  onSelect: PropTypes.func,\n  onRemoveItem: PropTypes.func,\n  popupTitle: PropTypes.string,\n  colorTheme: PropTypes.string,\n  isSelectSingle: PropTypes.bool,\n  showSearchBox: PropTypes.bool,\n  cancelButtonText: PropTypes.string,\n  selectButtonText: PropTypes.string\n};\nexport default Select2;","map":{"version":3,"sources":["C:/xampp/htdocs/iym_mobile/SC/iym_mobile/node_modules/react-native-select-two/index.js"],"names":["React","Component","Icon","Modal","Button","TagItem","utilities","PropTypes","Dimensions","get","height","INIT_HEIGHT","Select2","state","show","preSelectedItem","selectedItem","data","keyword","animatedHeight","Animated","Value","onItemSelected","item","isSelectSingle","checked","index","id","map","push","setState","keyExtractor","idx","toString","renderItem","props","colorTheme","styles","itemWrapper","itemText","defaultFont","name","itemIcon","renderEmpty","listEmptyTitle","empty","closeModal","showModal","init","newProps","listMappingKeyword","changeAlias","includes","defaultFontName","fontFamily","_selectedItem","style","modalStyle","title","onSelect","onRemoveItem","popupTitle","cancelButtonText","selectButtonText","searchPlaceHolderText","selectedTitleStyle","buttonTextStyle","buttonStyle","showSearchBox","container","justifyContent","margin","modalContainer","color","line","inputKeyword","spring","toValue","Platform","OS","friction","start","listOption","dataRender","buttonWrapper","cancelSelection","button","marginRight","marginLeft","borderWidth","borderColor","selectedIds","selectedObjectItems","length","selectedTitlte","tagWrapper","tag","defaultProps","StyleSheet","create","width","minHeight","borderRadius","paddingHorizontal","flexDirection","alignItems","paddingVertical","paddingTop","backgroundColor","borderTopLeftRadius","borderTopRightRadius","fontSize","marginBottom","textAlign","paddingLeft","marginHorizontal","marginTop","marginVertical","flex","flexWrap","borderBottomWidth","borderBottomColor","alignSelf","propTypes","array","isRequired","object","string","func","bool"],"mappings":"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","sourcesContent":["//import liraries\nimport React, { Component } from 'react';\nimport { Text, StyleSheet, TouchableOpacity, View, FlatList, TextInput, Dimensions, Animated, Platform } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\nimport Modal from 'react-native-modal';\nimport Button from './lib/Button';\nimport TagItem from './lib/TagItem';\nimport utilities from './lib/utilities';\nimport PropTypes from 'prop-types';\n\nconst { height } = Dimensions.get('window');\nconst INIT_HEIGHT = height * 0.6;\n// create a component\nclass Select2 extends Component {\n    static defaultProps = {\n        cancelButtonText: 'Hủy',\n        selectButtonText: 'Chọn',\n        searchPlaceHolderText: \"Nhập vào từ khóa\",\n        listEmptyTitle: 'Không tìm thấy lựa chọn phù hợp',\n        colorTheme: '#16a45f',\n        buttonTextStyle: {},\n        buttonStyle: {},\n        showSearchBox: true\n    }\n    state = {\n        show: false,\n        preSelectedItem: [],\n        selectedItem: [],\n        data: [],\n        keyword: ''\n    }\n    animatedHeight = new Animated.Value(INIT_HEIGHT);\n\n    componentDidMount() {\n        this.init();\n    };\n\n    UNSAFE_componentWillReceiveProps(newProps) {\n        this.init(newProps);\n    }\n\n    init(newProps) {\n        let preSelectedItem = [];\n        let { data } = newProps || this.props;\n        data.map(item => {\n            if (item.checked) {\n                preSelectedItem.push(item);\n            }\n        })\n        this.setState({ data, preSelectedItem });\n    }\n\n    get dataRender() {\n        let { data, keyword } = this.state;\n        let listMappingKeyword = [];\n        data.map(item => {\n            if (utilities.changeAlias(item.name).includes(utilities.changeAlias(keyword))) {\n                listMappingKeyword.push(item);\n            }\n        });\n        return listMappingKeyword;\n    }\n\n    get defaultFont() {\n        let { defaultFontName } = this.props;\n        return defaultFontName ? { fontFamily: defaultFontName } : {};\n    }\n\n    cancelSelection() {\n        let { data, preSelectedItem } = this.state;\n        data.map(item => {\n            item.checked = false;\n            for (let _selectedItem of preSelectedItem) {\n                if (item.id === _selectedItem.id) {\n                    item.checked = true;\n                    break;\n                }\n            }\n        });\n        this.setState({ data, show: false, keyword: '', selectedItem: preSelectedItem });\n    }\n\n    onItemSelected = (item, isSelectSingle) => {\n        let selectedItem = [];\n        let { data } = this.state;\n        item.checked = !item.checked;\n        for (let index in data) {\n            if (data[index].id === item.id) {\n                data[index] = item;\n            } else if (isSelectSingle) {\n                data[index].checked = false;\n            }\n        }\n        data.map(item => {\n            if (item.checked) selectedItem.push(item);\n        })\n        this.setState({ data, selectedItem });\n    }\n    keyExtractor = (item, idx) => idx.toString();\n    renderItem = ({ item, idx }) => {\n        let { colorTheme, isSelectSingle } = this.props;\n        return (\n            <TouchableOpacity\n                key={idx}\n                onPress={() => this.onItemSelected(item, isSelectSingle)}\n                activeOpacity={0.7}\n                style={styles.itemWrapper}>\n                <Text style={[styles.itemText, this.defaultFont]}>\n                    {item.name}\n                </Text>\n                <Icon style={styles.itemIcon}\n                    name={item.checked ? 'check-circle-outline' : 'radiobox-blank'}\n                    color={item.checked ? colorTheme : '#777777'} size={20} />\n            </TouchableOpacity>\n        );\n    }\n    renderEmpty = () => {\n        let { listEmptyTitle } = this.props;\n        return (\n            <Text style={[styles.empty, this.defaultFont]}>\n                {listEmptyTitle}\n            </Text>\n        );\n    }\n    closeModal = () => this.setState({ show: false });\n    showModal = () => this.setState({ show: true });\n\n    render() {\n        let {\n            style, modalStyle, title, onSelect, onRemoveItem, popupTitle, colorTheme,\n            isSelectSingle, cancelButtonText, selectButtonText, searchPlaceHolderText,\n            selectedTitleStyle, buttonTextStyle, buttonStyle, showSearchBox\n        } = this.props;\n        let { show, selectedItem, preSelectedItem } = this.state;\n        return (\n            <TouchableOpacity\n                onPress={this.showModal}\n                activeOpacity={0.7}\n                style={[styles.container, style]}>\n                <Modal\n                    onBackdropPress={this.closeModal}\n                    style={{\n                        justifyContent: 'flex-end',\n                        margin: 0\n                    }}\n                    useNativeDriver={true}\n                    animationInTiming={300}\n                    animationOutTiming={300}\n                    hideModalContentWhileAnimating\n                    isVisible={show}>\n                    <Animated.View style={[styles.modalContainer, modalStyle, { height: this.animatedHeight }]}>\n                        <View>\n                            <Text style={[styles.title, this.defaultFont, { color: colorTheme }]}>\n                                {popupTitle || title}\n                            </Text>\n                        </View>\n                        <View style={styles.line} />\n                        {\n                            showSearchBox\n                                ? <TextInput\n                                    underlineColorAndroid='transparent'\n                                    returnKeyType='done'\n                                    style={[styles.inputKeyword, this.defaultFont]}\n                                    placeholder={searchPlaceHolderText}\n                                    selectionColor={colorTheme}\n                                    onChangeText={keyword => this.setState({ keyword })}\n                                    onFocus={() => {\n                                        Animated.spring(this.animatedHeight, {\n                                            toValue: INIT_HEIGHT + (Platform.OS === 'ios' ? height * 0.2 : 0),\n                                            friction: 7\n                                        }).start();\n                                    }}\n                                    onBlur={() => {\n                                        Animated.spring(this.animatedHeight, {\n                                            toValue: INIT_HEIGHT,\n                                            friction: 7\n                                        }).start();\n                                    }}\n                                />\n                                : null\n                        }\n                        <FlatList\n                            style={styles.listOption}\n                            data={this.dataRender || []}\n                            keyExtractor={this.keyExtractor}\n                            renderItem={this.renderItem}\n                            ListEmptyComponent={this.renderEmpty}\n                        />\n\n                        <View style={styles.buttonWrapper}>\n                            <Button\n                                defaultFont={this.defaultFont}\n                                onPress={() => {\n                                    this.cancelSelection();\n                                }}\n                                title={cancelButtonText}\n                                textColor={colorTheme}\n                                backgroundColor='#fff'\n                                textStyle={buttonTextStyle}\n                                style={[styles.button, buttonStyle, { marginRight: 5, marginLeft: 10, borderWidth: 1, borderColor: colorTheme }]} />\n                            <Button\n                                defaultFont={this.defaultFont}\n                                onPress={() => {\n                                    let selectedIds = [], selectedObjectItems = [];\n                                    selectedItem.map(item => {\n                                        selectedIds.push(item.id);\n                                        selectedObjectItems.push(item);\n                                    })\n                                    onSelect && onSelect(selectedIds, selectedObjectItems);\n                                    this.setState({ show: false, keyword: '', preSelectedItem: selectedItem });\n                                }}\n                                title={selectButtonText}\n                                backgroundColor={colorTheme}\n                                textStyle={buttonTextStyle}\n                                style={[styles.button, buttonStyle, { marginLeft: 5, marginRight: 10 }]} />\n                        </View>\n                    </Animated.View>\n                </Modal>\n                {\n                    preSelectedItem.length > 0\n                        ? (\n                            isSelectSingle\n                                ? <Text style={[styles.selectedTitlte, this.defaultFont, selectedTitleStyle, { color: '#333' }]}>{preSelectedItem[0].name}</Text>\n                                : <View style={styles.tagWrapper}>\n                                    {\n                                        preSelectedItem.map((tag, index) => {\n                                            return (\n                                                <TagItem\n                                                    key={index}\n                                                    onRemoveTag={() => {\n                                                        let preSelectedItem = [];\n                                                        let selectedIds = [], selectedObjectItems = [];\n                                                        let { data } = this.state;\n                                                        data.map(item => {\n                                                            if (item.id === tag.id) {\n                                                                item.checked = false;\n                                                            }\n                                                            if (item.checked) {\n                                                                preSelectedItem.push(item);\n                                                                selectedIds.push(item.id);\n                                                                selectedObjectItems.push(item);\n                                                            };\n                                                        })\n                                                        this.setState({ data, preSelectedItem });\n                                                        onRemoveItem && onRemoveItem(selectedIds, selectedObjectItems);\n                                                    }}\n                                                    tagName={tag.name} />\n                                            );\n                                        })\n                                    }\n                                </View>\n                        )\n                        : <Text style={[styles.selectedTitlte, this.defaultFont, selectedTitleStyle]}>{title}</Text>\n                }\n            </TouchableOpacity>\n        );\n    }\n}\n\n// define your styles\nconst styles = StyleSheet.create({\n    container: {\n        width: '100%', minHeight: 45, borderRadius: 2, paddingHorizontal: 16,\n        flexDirection: 'row', alignItems: 'center', borderWidth: 1,\n        borderColor: '#cacaca', paddingVertical: 4\n    },\n    modalContainer: {\n        paddingTop: 16, backgroundColor: '#fff', borderTopLeftRadius: 8, borderTopRightRadius: 8\n    },\n    title: {\n        fontSize: 16, marginBottom: 16, width: '100%', textAlign: 'center'\n    },\n    line: {\n        height: 1, width: '100%', backgroundColor: '#cacaca'\n    },\n    inputKeyword: {\n        height: 40, borderRadius: 5, borderWidth: 1, borderColor: '#cacaca',\n        paddingLeft: 8, marginHorizontal: 24, marginTop: 16\n    },\n    buttonWrapper: {\n        marginVertical: 16, flexDirection: 'row', alignItems: 'center', justifyContent: 'center'\n    },\n    button: {\n        height: 36, flex: 1\n    },\n    selectedTitlte: {\n        fontSize: 14, color: 'gray', flex: 1\n    },\n    tagWrapper: {\n        flexDirection: 'row', flexWrap: 'wrap'\n    },\n    listOption: {\n        paddingHorizontal: 24,\n        paddingTop: 1, marginTop: 16\n    },\n    itemWrapper: {\n        borderBottomWidth: 1, borderBottomColor: '#eaeaea',\n        paddingVertical: 12, flexDirection: 'row', alignItems: 'center'\n    },\n    itemText: {\n        fontSize: 16, color: '#333', flex: 1\n    },\n    itemIcon: {\n        width: 30, textAlign: 'right'\n    },\n    empty: {\n        fontSize: 16, color: 'gray', alignSelf: 'center', textAlign: 'center', paddingTop: 16\n    }\n});\n\nSelect2.propTypes = {\n    data: PropTypes.array.isRequired,\n    style: PropTypes.object,\n    defaultFontName: PropTypes.string,\n    selectedTitleStyle: PropTypes.object,\n    buttonTextStyle: PropTypes.object,\n    buttonStyle: PropTypes.object,\n    title: PropTypes.string,\n    onSelect: PropTypes.func,\n    onRemoveItem: PropTypes.func,\n    popupTitle: PropTypes.string,\n    colorTheme: PropTypes.string,\n    isSelectSingle: PropTypes.bool,\n    showSearchBox: PropTypes.bool,\n    cancelButtonText: PropTypes.string,\n    selectButtonText: PropTypes.string\n}\n\n//make this component available to the app\nexport default Select2;\n"]},"metadata":{},"sourceType":"module"}