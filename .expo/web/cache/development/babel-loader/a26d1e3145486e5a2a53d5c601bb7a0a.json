{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\iym_mobile\\\\SC\\\\iym_mobile\\\\components\\\\Autocomplete.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Block, Input } from \"galio-framework\";\nimport Icon from \"./Icon\";\nimport Text from \"./Text\";\nimport { nowTheme } from \"../constants\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\n\nvar TextAutocomplete = function (_React$Component) {\n  _inherits(TextAutocomplete, _React$Component);\n\n  var _super = _createSuper(TextAutocomplete);\n\n  function TextAutocomplete() {\n    var _this;\n\n    _classCallCheck(this, TextAutocomplete);\n\n    _this = _super.call(this);\n\n    _this.inputValueUpdate = function (val, prop) {\n      _this.setState({\n        isClicked: false,\n        valueText: val\n      });\n\n      _this.props.textChanged(val, prop);\n    };\n\n    _this.valueFocus = function () {\n      _this.setState({\n        valueSelected: value\n      });\n    };\n\n    _this.valueBlur = function () {\n      _this.setState({\n        isClicked: true,\n        valueText: _this.props.value\n      });\n    };\n\n    _this.renderList = function (item, index) {\n      return React.createElement(Block, {\n        key: index,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 7\n        }\n      }, React.createElement(Block, {\n        style: {\n          paddingBottom: 5\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return _this.selectedItem(item, _this.props.category);\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }\n      }, React.createElement(Block, {\n        card: true,\n        style: {\n          backgroundColor: nowTheme.COLORS.BLOCK,\n          borderWidth: 1,\n          borderColor: nowTheme.COLORS.GRAY\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }\n      }, React.createElement(Block, {\n        style: {\n          paddingVertical: 5,\n          paddingHorizontal: 15\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }\n      }, React.createElement(Text, {\n        size: 15,\n        title: item.name,\n        color: nowTheme.COLORS.GRAY,\n        bold: true,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }\n      }))))));\n    };\n\n    _this.selectedItem = function (item, category) {\n      Keyboard.dismiss();\n\n      _this.setState({\n        isClicked: true\n      });\n\n      _this.props.selectedItem(item, category);\n    };\n\n    _this.state = {\n      isClicked: false,\n      valueText: ''\n    };\n    return _this;\n  }\n\n  _createClass(TextAutocomplete, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.setState({\n                valueText: this.props.value\n              });\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          shadowless = _this$props.shadowless,\n          success = _this$props.success,\n          error = _this$props.error,\n          primary = _this$props.primary,\n          menu = _this$props.menu,\n          category = _this$props.category,\n          categorySelected = _this$props.categorySelected,\n          workpack = _this$props.workpack,\n          data = _this$props.data,\n          title = _this$props.title,\n          value = _this$props.value,\n          style = _this$props.style;\n      return React.createElement(Block, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 7\n        }\n      }, React.createElement(Input, {\n        onChangeText: function onChangeText(val) {\n          return _this2.inputValueUpdate(val, category);\n        },\n        onBlur: function onBlur() {\n          return _this2.valueFocus();\n        },\n        onBlur: function onBlur() {\n          return _this2.valueBlur();\n        },\n        placeholder: \"Search \" + title,\n        value: categorySelected == category ? this.state.valueText : this.state.valueText,\n        placeholderTextColor: nowTheme.COLORS.GRAY,\n        style: [style, {\n          borderColor: nowTheme.COLORS.GRAY\n        }],\n        color: nowTheme.COLORS.GRAY,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      }), React.createElement(Block, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }\n      }, categorySelected == category && this.state.isClicked == false ? this.props.data.map(function (item, index) {\n        return _this2.renderList(item, index);\n      }) : null));\n    }\n  }]);\n\n  return TextAutocomplete;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  input: {\n    borderRadius: 30,\n    borderColor: nowTheme.COLORS.BORDER,\n    height: 44,\n    backgroundColor: '#FFFFFF'\n  },\n  success: {\n    borderColor: nowTheme.COLORS.INPUT_SUCCESS\n  },\n  error: {\n    borderColor: nowTheme.COLORS.INPUT_ERROR\n  },\n  primary: {\n    borderColor: nowTheme.COLORS.PRIMARY\n  },\n  shadow: {\n    shadowColor: nowTheme.COLORS.BLACK,\n    shadowOffset: {\n      width: 0,\n      height: 0.5\n    },\n    shadowRadius: 1,\n    shadowOpacity: 0.13,\n    elevation: 2\n  }\n});\nexport default TextAutocomplete;","map":{"version":3,"sources":["C:/xampp/htdocs/iym_mobile/SC/iym_mobile/components/Autocomplete.js"],"names":["React","PropTypes","Block","Input","Icon","Text","nowTheme","TextAutocomplete","inputValueUpdate","val","prop","setState","isClicked","valueText","props","textChanged","valueFocus","valueSelected","value","valueBlur","renderList","item","index","paddingBottom","selectedItem","category","backgroundColor","COLORS","BLOCK","borderWidth","borderColor","GRAY","paddingVertical","paddingHorizontal","name","Keyboard","dismiss","state","shadowless","success","error","primary","menu","categorySelected","workpack","data","title","style","map","Component","styles","StyleSheet","create","input","borderRadius","BORDER","height","INPUT_SUCCESS","INPUT_ERROR","PRIMARY","shadow","shadowColor","BLACK","shadowOffset","width","shadowRadius","shadowOpacity","elevation"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport { Block, Input } from \"galio-framework\";\n\nimport Icon from './Icon';\nimport Text from './Text';\nimport { nowTheme } from \"../constants\";\nimport { \n  Keyboard,\n  StyleSheet, \n  TouchableWithoutFeedback ,\n  TouchableOpacity\n} from \"react-native\";\n\nclass TextAutocomplete extends React.Component {\n\n  constructor() {\n    super();\n    // console.log();\n\n    this.state = {\n      isClicked: false,\n      valueText: '',\n    };\n  }\n\n  async componentDidMount() {\n    this.setState({\n      valueText: this.props.value,\n    });\n  }\n\n  render() {\n    var { \n      shadowless, \n      success, \n      error, \n      primary,\n      menu,\n      category,\n      categorySelected,\n      workpack,\n      data,\n      title,\n      value,\n      style,\n    } = this.props;\n\n    return (\n      <Block>\n        <Input\n          onChangeText={(val) => this.inputValueUpdate(val, category)}\n          onBlur={() => this.valueFocus() }\n          onBlur={() => this.valueBlur() }\n          placeholder={\"Search \" + title }\n          value={(categorySelected == category) ? this.state.valueText : this.state.valueText }\n          placeholderTextColor={nowTheme.COLORS.GRAY}\n          style={[\n            style,\n            {\n              borderColor: nowTheme.COLORS.GRAY,\n            }\n          ]}\n          color={nowTheme.COLORS.GRAY}\n        />\n\n        <Block>\n          \n          { \n            (categorySelected == category && this.state.isClicked == false) ? (\n              this.props.data.map((item, index) => {\n                return this.renderList(item, index)\n              })\n            ) : null \n          }\n            \n          \n        </Block>\n      </Block>\n    );\n  }\n\n  inputValueUpdate = (val, prop) => {\n    this.setState({isClicked: false, valueText: val});\n    this.props.textChanged(val, prop)\n  }\n\n  valueFocus = () => {\n    this.setState({valueSelected: value});\n  }\n\n  valueBlur = () => {\n    this.setState({isClicked: true, valueText: this.props.value});\n  }\n\n  renderList = (item, index) => {\n    return(\n      <Block key={index}>\n\n        <Block style={{paddingBottom: 5}}>\n          <TouchableOpacity onPress={() => this.selectedItem(item, this.props.category) }>\n            <Block card style={{backgroundColor: nowTheme.COLORS.BLOCK, borderWidth: 1, borderColor: nowTheme.COLORS.GRAY}}>\n              <Block style={{paddingVertical: 5, paddingHorizontal: 15}}>\n                <Text \n                  size={15}\n                  title={item.name}\n                  color={nowTheme.COLORS.GRAY}\n                  bold\n                />\n              </Block>\n            </Block>\n          </TouchableOpacity>\n        </Block>\n        \n      </Block>\n    )\n  }\n\n  selectedItem = (item, category) => {\n    Keyboard.dismiss();\n    this.setState({isClicked: true});\n    this.props.selectedItem(item, category)\n  }\n}\n\nconst styles = StyleSheet.create({\n  input: {\n    borderRadius: 30,\n    borderColor: nowTheme.COLORS.BORDER,\n    height: 44,\n    backgroundColor: '#FFFFFF'\n  },\n  success: {\n    borderColor: nowTheme.COLORS.INPUT_SUCCESS\n  },\n  error: {\n    borderColor: nowTheme.COLORS.INPUT_ERROR\n  },\n  primary: {\n    borderColor: nowTheme.COLORS.PRIMARY\n  },\n  shadow: {\n    shadowColor: nowTheme.COLORS.BLACK,\n    shadowOffset: { width: 0, height: 0.5 },\n    shadowRadius: 1,\n    shadowOpacity: 0.13,\n    elevation: 2,\n  }\n});\n\nexport default TextAutocomplete;\n"]},"metadata":{},"sourceType":"module"}